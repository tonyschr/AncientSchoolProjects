package stomp.gui;

import java.awt.*;
import java.awt.event.*;

import stomp.GUIListener;
import stomp.Mode;

/**
 * ButtonBar class.  Used to create the button bar for the left
 * side of the screen.
 *
 * <p>
 * In the future, this should replaced by a better toolbar, such as
 * provided in the Java Foundation Classes.
 *
 * <p>
 * While any component can be added to it, ButtonBar mainly
 * holds buttons and "lockbuttons"
 */
public class ButtonBar extends Panel implements ActionListener, KeyListener
{
    //Mode to save when going into temporary modes such as Zoom and Pan.
    private int m_savedMode = 0;

    //Panels and associated layout managers so they can be consistently
    //layed out and re-layed out.
    private GUIListener m_guiListener;
    private Panel m_modeButtons = new Panel();
    private Panel m_selectContext = new Panel();
    private Panel m_createContext = new Panel();
    private Panel m_transformContext = new Panel();
    private Panel m_modifyContext = new Panel();
    private Panel m_currentContext = new Panel();
    private Panel m_staticButtons = new Panel();
    private BorderLayout m_borderLayout = new BorderLayout();
    private Panel m_blankPanel = new Panel();
    private Panel m_panPanel = new Panel();
    private Panel m_viewPanel = new Panel();

    private LayoutManager m_modeLayout = new GridBagLayout();
    private LayoutManager m_selectLayout = new GridBagLayout();
    private LayoutManager m_createLayout = new GridBagLayout();
    private LayoutManager m_transformLayout = new GridBagLayout();
    private LayoutManager m_modifyLayout = new GridBagLayout();
    private LayoutManager m_staticLayout = new GridBagLayout();
    private LayoutManager m_panLayout = new GridBagLayout();
    private LayoutManager m_viewLayout = new GridLayout(2,3);

    //Mode buttons
    private LockButton m_select = new LockButton("Select");
    private LockButton m_create = new LockButton("Create");
    private LockButton m_transform = new LockButton("Transform");
    private LockButton m_modify = new LockButton("Modify");
    private LockButton m_pan = new LockButton("Pan");
    private LockButton m_zoom = new LockButton("Zoom");
    private LockButton m_rotatePers = new LockButton("Pers. Rotate");

    //Selection buttons
    private LockButton m_selectVertices = new LockButton("Select Vertices");
    private LockButton m_selectPrimitive = new LockButton("Select Primitive");
    private LockButton m_selectRegion = new LockButton("Select Region");

    //Creation Buttons
    private LockButton m_addVertices = new LockButton("Add Vertices");
    private LockButton m_freedraw = new LockButton("Draw Vertices");
    
    //Transformation Buttons
    private LockButton m_move = new LockButton("Move");
    private LockButton m_rotate = new LockButton("Rotate");
    private LockButton m_scale = new LockButton("Scale");
    private LockButton m_shear = new LockButton("Shear");
    private LockButton m_taper = new LockButton("Taper");

    /**
     * Constructor.
     *
     * @param guiListener ActionListener capable of listening to
     * all of the events generated by the button bar.
     */
    public ButtonBar(GUIListener guiListener)
    {
        super();
        
        m_guiListener = guiListener;

        //Add top buttons (static, mode)
        addModeButtons();

        //Create buttons that depend on context
        addContextButtons();

        //Add buttons at the bottom (static, view modes)
        addStaticButtons();
        
        m_borderLayout.setVgap(3);
        setLayout(m_borderLayout);
        setBackground(SystemColor.control);

        add(m_modeButtons, BorderLayout.NORTH);
        add(m_staticButtons, BorderLayout.SOUTH);

        //Set middle panel to be initially blank
        m_currentContext = m_blankPanel;
        updateButtonBar();        
    }

    /**
     * Add mode buttons.  Mode buttons are the buttons at the top
     * that can be selected to bring up other sub-menus.
     */
    private void addModeButtons()
    {
        m_modeButtons.setLayout(m_modeLayout);
        GridBagConstraints gbc = new GridBagConstraints();
        
        //Set up default Grid Bag Constraints
        gbc.fill = GridBagConstraints.BOTH;
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(2, 4, 0, 4);

        m_modeButtons.add(m_select, gbc);
        m_select.addActionListener(this);
        
        gbc.gridy++;
        m_modeButtons.add(m_create, gbc);
        m_create.addActionListener(this);

        gbc.gridy++;
        m_modeButtons.add(m_transform, gbc);
        m_transform.addActionListener(this);

        gbc.gridy++;
        m_modeButtons.add(m_modify, gbc);
        m_modify.addActionListener(this);
    }

    /**
     * Add context-sensitive buttons.  These buttons are the middle
     * panel and appear and disappear depending on the current mode.
     */
    private void addContextButtons()
    {
        //Add buttons for Select Panel
        m_selectContext.setLayout(m_selectLayout);
        GridBagConstraints gbc = new GridBagConstraints();
        
        //Set up default Grid Bag Constraints
        gbc.fill = GridBagConstraints.BOTH;
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(2, 4, 0, 4);
         
        m_selectContext.add(m_selectVertices, gbc);
        m_selectVertices.addActionListener(this);
        
        gbc.gridy++;
        m_selectContext.add(m_selectPrimitive, gbc);
        m_selectPrimitive.addActionListener(this);

        gbc.gridy++;
        m_selectContext.add(m_selectRegion, gbc);
        m_selectRegion.addActionListener(this);

        gbc.gridy++;
        Button selectConnected = new Button("Select Connected");
        selectConnected.addActionListener(m_guiListener);
        m_selectContext.add(selectConnected, gbc);

        gbc.gridy++;
        Button invert = new Button("Invert Selection");
        invert.addActionListener(m_guiListener);
        m_selectContext.add(invert, gbc);

        gbc.gridy++;
        Button deselectLast = new Button("Deselect Last");
        deselectLast.addActionListener(m_guiListener);
        m_selectContext.add(deselectLast, gbc);
        
        gbc.gridy++;
        Button deselectAll = new Button("Deselect All");
        deselectAll.addActionListener(m_guiListener);
        m_selectContext.add(deselectAll, gbc);

        gbc.gridy++;
        Button groupSelected = new Button("Group Selected");
        groupSelected.addActionListener(m_guiListener);
        m_selectContext.add(groupSelected, gbc);

        gbc.gridy++;
        Button ungroupSelected = new Button("Ungroup Selected");
        ungroupSelected.addActionListener(m_guiListener);
        m_selectContext.add(ungroupSelected, gbc);        

        gbc.gridy++;
        Button hideSelected = new Button("Hide Selected");
        hideSelected.addActionListener(m_guiListener);
        m_selectContext.add(hideSelected, gbc);
        
        gbc.gridy++;
        Button unhide = new Button("Unhide All");
        unhide.addActionListener(m_guiListener);
        m_selectContext.add(unhide, gbc);
        
        //Add buttons for Create Panel
        m_createContext.setLayout(m_createLayout);
        gbc.gridy = 0;

        m_createContext.add(m_addVertices, gbc);
        m_addVertices.addActionListener(this);

        gbc.gridy++;
        m_createContext.add(m_freedraw, gbc);
        m_freedraw.addActionListener(this);
        
        gbc.gridy++;
        Button addPlanes = new Button("Create Polygon");
        m_createContext.add(addPlanes, gbc);
        addPlanes.addActionListener(m_guiListener);

        gbc.gridy++;
        Button addSpline = new Button("Create Spline");
        m_createContext.add(addSpline, gbc);
        addSpline.addActionListener(m_guiListener);

        gbc.gridy++;
        Button addSplineSurface = new Button("NURB Surface");
        m_createContext.add(addSplineSurface, gbc);
        addSplineSurface.addActionListener(m_guiListener);

        gbc.gridy++;
        Button addPrimitive = new Button("Add Primitive");
        m_createContext.add(addPrimitive, gbc);
        addPrimitive.addActionListener(m_guiListener);
        
        gbc.gridy++;
        Button addCamera = new Button("Add Camera");
        m_createContext.add(addCamera, gbc);
        addCamera.addActionListener(m_guiListener);
        
        gbc.gridy++;
        Button addLight = new Button("Add Light");
        m_createContext.add(addLight, gbc);
        addLight.addActionListener(m_guiListener);

        gbc.gridy++;
        Button surface = new Button("Surface");
        m_createContext.add(surface, gbc);
        surface.addActionListener(m_guiListener);

        //Add buttons to Modify Panel
        m_modifyContext.setLayout(m_modifyLayout);
        gbc.gridy = 0;
        Button extrude = new Button("Extrude");
        m_modifyContext.add(extrude, gbc);
        extrude.addActionListener(m_guiListener);

        gbc.gridy++;
        Button splineExtrude = new Button("Spline Extrude");
        m_modifyContext.add(splineExtrude, gbc);
        splineExtrude.addActionListener(m_guiListener);

        gbc.gridy++;
        Button bevel = new Button("Bevel");
        m_modifyContext.add(bevel, gbc);
        bevel.addActionListener(m_guiListener);
        
        gbc.gridy++;
        Button lathe = new Button("Lathe");
        m_modifyContext.add(lathe, gbc);
        lathe.addActionListener(m_guiListener);

        gbc.gridy++;
        Button delSel = new Button("Delete Selected");
        m_modifyContext.add(delSel, gbc);
        delSel.addActionListener(m_guiListener);        

        gbc.gridy++;
        Button flip = new Button("Flip");
        m_modifyContext.add(flip, gbc);
        flip.addActionListener(m_guiListener);

        gbc.gridy++;
        Button triangulate = new Button("Triangulate");
        m_modifyContext.add(triangulate, gbc);
        triangulate.addActionListener(m_guiListener);
        
        gbc.gridy++;
        Button sub = new Button("Subdivide");
        m_modifyContext.add(sub, gbc);
        sub.addActionListener(m_guiListener);

        gbc.gridy++;
        Button sub2 = new Button("Subdivide2");
        m_modifyContext.add(sub2, gbc);
        sub2.addActionListener(m_guiListener);

        gbc.gridy++;
        Button mergePoints = new Button("Merge Vertices");
        m_modifyContext.add(mergePoints, gbc);
        mergePoints.addActionListener(m_guiListener);
        
        gbc.gridy++;
        Button joinVertices = new Button("Join Vertices");
        m_modifyContext.add(joinVertices, gbc);
        joinVertices.addActionListener(m_guiListener);
        
        //Add buttons for Transform Panel
        m_transformContext.setLayout(m_transformLayout);
        gbc.gridy = 0;
        m_transformContext.add(m_move, gbc);
        m_move.addActionListener(this);
        
        gbc.gridy++;
        m_transformContext.add(m_rotate, gbc);
        m_rotate.addActionListener(this);
            
        gbc.gridy++;
        m_transformContext.add(m_scale, gbc);
        m_scale.addActionListener(this);

        gbc.gridy++;
        m_transformContext.add(m_shear, gbc);
        m_shear.addActionListener(this);

        //Taper is not implemented yet
        //         gbc.gridy++;
        //         m_transformContext.add(m_taper, gbc);
        //         m_taper.addActionListener(this);


        m_createContext.doLayout();
        m_selectContext.doLayout();
        m_transformContext.doLayout();
        m_modifyContext.doLayout();
    }

    /**
     * Add static buttons.  These buttons are at the bottom and are always
     * there.
     */
    public void addStaticButtons()
    {
        GridBagConstraints gbc = new GridBagConstraints();
        
        //Set up default Grid Bag Constraints
        gbc.fill = GridBagConstraints.BOTH;
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(2, 4, 0, 4);

        //Add buttons to Static Buttons Panel
        m_staticButtons.setLayout(m_staticLayout);
        gbc.gridy = 0;

        Button numeric = new Button("Numeric Options");
        m_staticButtons.add(numeric, gbc);
        numeric.addActionListener(m_guiListener);

        gbc.gridy++;
        m_panLayout.layoutContainer(m_panPanel);
        m_staticButtons.add(m_panPanel, gbc);
        
        gbc.gridy++;
        m_staticButtons.add(m_zoom, gbc);
        m_zoom.addActionListener(this);

        gbc.gridy++;
        m_staticButtons.add(m_pan, gbc);
        m_pan.addActionListener(this);
                
        //Add view controls
        {
            m_viewPanel.setLayout(m_viewLayout);
            Button topView = new Button("Top");
            m_viewPanel.add(topView);
            topView.addActionListener(m_guiListener);

            Button quadViews = new Button("Quad");
            m_viewPanel.add(quadViews);
            quadViews.addActionListener(m_guiListener);

            Button persView = new Button("Pers");
            m_viewPanel.add(persView);
            persView.addActionListener(m_guiListener);
            
            Button frontView = new Button("Front");
            m_viewPanel.add(frontView);
            frontView.addActionListener(m_guiListener);

            Button sideView = new Button("Side");
            m_viewPanel.add(sideView);
            sideView.addActionListener(m_guiListener);

            Button def= new Button("Def");
            m_viewPanel.add(def);
            def.addActionListener(m_guiListener);
            
            m_viewLayout.layoutContainer(m_viewPanel);
        }

        gbc.gridy++;
        m_staticButtons.add(m_viewPanel, gbc);
    }

    /**
     * Based on the current context, re-layout the button bar.
     */
    public void updateButtonBar()
    {
        add(m_currentContext, BorderLayout.CENTER);
        
        m_modeLayout.layoutContainer(m_modeButtons);
        m_selectLayout.layoutContainer(m_selectContext);
        m_createLayout.layoutContainer(m_createContext);
        m_transformLayout.layoutContainer(m_transformContext);
        m_modifyLayout.layoutContainer(m_modifyContext);

        invalidate();
        doLayout();
        repaint();

        m_currentContext.invalidate();
        m_currentContext.doLayout();
        m_currentContext.validate();
        m_currentContext.repaint();
        
//          invalidate();
//          doLayout();
//          repaint();
//          super.repaint();
//          m_currentContext.repaint();
    }

    /**
     * Deselect all of the lock button items in the middle section
     * (current context).
     */
    private void deselectInCurrentContext()
    {
        Component comp[] = m_currentContext.getComponents();
        for(int i = 0; i < comp.length; i++)
        {
            if(comp[i] instanceof LockButton)
            {
                ((LockButton)comp[i]).setSelected(false);
            }
        }

        Component comp2[] = m_staticButtons.getComponents();
        for(int i = 0; i < comp2.length; i++)
        {
            if(comp2[i] instanceof LockButton)
            {
                ((LockButton)comp2[i]).setSelected(false);
            }
        }

        m_pan.setSelected(false);
        m_zoom.setSelected(false);
        m_rotatePers.setSelected(false);
    }

    /**
     * ButtonBar listens to events from the lock buttons so that it
     * can change the mode and the context-senstive menus.
     */
    public void actionPerformed(ActionEvent e)
    {
        if(e.getActionCommand().equals("Select"))
        {
            if(!m_select.isSelected())
            {
                Mode.setMode(Mode.NONE);
                m_select.setSelected(true);
                deselectInCurrentContext();
                remove(m_currentContext);
                m_currentContext = m_selectContext;
                updateButtonBar();
            }

            m_create.setSelected(false);
            m_transform.setSelected(false);
            m_modify.setSelected(false);
        }        
        else if(e.getActionCommand().equals("Create"))
        {
            if(!m_create.isSelected())
            {
                Mode.setMode(Mode.NONE);
                m_create.setSelected(true);
                deselectInCurrentContext();
                remove(m_currentContext);
                m_currentContext = m_createContext;
                updateButtonBar();
            }

            m_select.setSelected(false);
            m_transform.setSelected(false);
            m_modify.setSelected(false);
        }
        else if(e.getActionCommand().equals("Transform"))
        {
            if(!m_transform.isSelected())
            {
                Mode.setMode(Mode.NONE);
                m_transform.setSelected(true);
                deselectInCurrentContext();
                remove(m_currentContext);
                m_currentContext = m_transformContext;
                updateButtonBar();
            }

            m_select.setSelected(false);
            m_create.setSelected(false);
            m_modify.setSelected(false);
        }
        else if(e.getActionCommand().equals("Modify"))
        {
            if(!m_modify.isSelected())
            {
                Mode.setMode(Mode.NONE);
                m_modify.setSelected(true);
                deselectInCurrentContext();
                remove(m_currentContext);
                m_currentContext = m_modifyContext;
                updateButtonBar();
            }

            m_select.setSelected(false);
            m_create.setSelected(false);
            m_transform.setSelected(false);
        }
        else if(e.getActionCommand().equals("Pan"))
        {
            if(!m_pan.isSelected())
            {
                m_pan.setSelected(true);
                if(m_zoom.isSelected() || m_rotatePers.isSelected())
                {
                    m_zoom.setSelected(false);
                    m_rotatePers.setSelected(false);
                }
                else
                {
                    m_savedMode = Mode.getMode();
                }
                Mode.setMode(Mode.PAN);
            }
            else
            {
                m_pan.setSelected(false);
                Mode.setMode(m_savedMode);
            }
        }
        else if(e.getActionCommand().equals("Zoom"))
        {
            if(!m_zoom.isSelected())
            {
                m_zoom.setSelected(true);
                if(m_pan.isSelected() || m_rotatePers.isSelected())
                {
                    m_rotatePers.setSelected(false);
                    m_pan.setSelected(false);
                }
                else
                {
                    m_savedMode = Mode.getMode();
                }
                Mode.setMode(Mode.ZOOM);
            }
            else
            {
                m_zoom.setSelected(false);
                Mode.setMode(m_savedMode);
            }
        }
        else if(e.getActionCommand().equals("Select Vertices"))
        {
            if(!m_selectVertices.isSelected())
            {
                deselectInCurrentContext();
                m_selectVertices.setSelected(true);
                Mode.setMode(Mode.VERTEX_SELECT);
            }
        }
        else if(e.getActionCommand().equals("Select Primitive"))
        {
            deselectInCurrentContext();
            m_selectPrimitive.setSelected(true);
            Mode.setMode(Mode.PRIMITIVE_SELECT);
        }
        else if(e.getActionCommand().equals("Select Region"))
        {
            if(m_selectVertices.isSelected())
            {
                m_selectRegion.setSelected(m_selectRegion.isSelected()==false);
                if(m_selectRegion.isSelected())
                    Mode.setMode(Mode.REGION_VERTEX_SELECT);
                else
                    Mode.setMode(Mode.VERTEX_SELECT);
            }
            else if(m_selectPrimitive.isSelected())
            {
                m_selectRegion.setSelected(m_selectRegion.isSelected()==false);
                if(m_selectRegion.isSelected())
                    Mode.setMode(Mode.REGION_PRIMITIVE_SELECT);
                else
                    Mode.setMode(Mode.PRIMITIVE_SELECT);
            }
            
            m_pan.setSelected(false);
            m_zoom.setSelected(false);
        }

        //Creation modes
        else if(e.getActionCommand().equals("Add Vertices"))
        {
            deselectInCurrentContext();
            m_addVertices.setSelected(true);
            Mode.setMode(Mode.ADD_POINTS);
        }

        else if(e.getActionCommand().equals("Draw Vertices"))
        {
            deselectInCurrentContext();
            m_freedraw.setSelected(true);
            Mode.setMode(Mode.ADD_POINTS_FREEDRAW);
        }
        
        //Translation Modes
        else if(e.getActionCommand().equals("Move"))
        {
            deselectInCurrentContext();
            m_move.setSelected(true);
            Mode.setMode(Mode.TRANSLATE);
        }
        else if(e.getActionCommand().equals("Rotate"))
        {
            deselectInCurrentContext();
            m_rotate.setSelected(true);
            Mode.setMode(Mode.ROTATE);
        }
        else if(e.getActionCommand().equals("Scale"))
        {
            deselectInCurrentContext();
            m_scale.setSelected(true);
            Mode.setMode(Mode.SCALE);
        }
        else if(e.getActionCommand().equals("Shear"))
        {
            deselectInCurrentContext();
            m_shear.setSelected(true);
            Mode.setMode(Mode.SHEAR);
        }
    }    

    public void keyPressed(KeyEvent e)
    {
        char key = e.getKeyChar();
        
        ActionEvent contextEvent = new ActionEvent(this, 0, "nothing");
        ActionEvent fireEvent = new ActionEvent(this, 0, "nothing");
        if(key == 'v')
        {
            contextEvent = new ActionEvent(this, 0, "Select");
            fireEvent = new ActionEvent(this, 0, "Select Vertices");
        }
        else if(key == 'f')
        {
            contextEvent = new ActionEvent(this, 0, "Select");
            fireEvent = new ActionEvent(this, 0, "Select Primitive");
        }
        else if(key == 'p')
        {
            fireEvent = new ActionEvent(this, 0, "Pan");
        }
        else if(key == 'z')
        {
            fireEvent = new ActionEvent(this, 0, "Zoom");
        }
        else if(key == 'g')
        {
            contextEvent = new ActionEvent(this, 0, "Select");
            fireEvent = new ActionEvent(this, 0, "Select Region");
        }
        else if(key == 'a')
        {
            contextEvent = new ActionEvent(this, 0, "Create");
            fireEvent = new ActionEvent(this, 0, "Add Vertices");
        }
        else if(key == 'm')
        {
            contextEvent = new ActionEvent(this, 0, "Transform");
            fireEvent = new ActionEvent(this, 0, "Move");
        }
        else if(key == 'r')
        {
            contextEvent = new ActionEvent(this, 0, "Transform");
            fireEvent = new ActionEvent(this, 0, "Rotate");
        }
        else if(key == 's')
        {
            contextEvent = new ActionEvent(this, 0, "Transform");
            fireEvent = new ActionEvent(this, 0, "Scale");
        }
        else if(key == 'h')
        {
            contextEvent = new ActionEvent(this, 0, "Transform");
            fireEvent = new ActionEvent(this, 0, "Shear");
        }
        else if(key == KeyEvent.VK_DELETE)
        {
            contextEvent = new ActionEvent(this, 0, "Create");
            fireEvent = new ActionEvent(this, 0, "Delete Selected");
        }

        actionPerformed(contextEvent);
        actionPerformed(fireEvent);
        m_guiListener.actionPerformed(fireEvent);
    }

    public void keyReleased(KeyEvent e)
    {
    }

    public void keyTyped(KeyEvent e)
    {
    }

//     public Dimension getPreferredSize()
//     {
//         return new Dimension(140, 300);
//     }
}
/***********************************************************
 * $Log: ButtonBar.java,v $
 * Revision 1.18  1998/05/07 18:36:16  speck
 * Final versions for 5/7 deliverable
 *
 * Revision 1.17  1998/05/07 07:46:55  schreine
 * Nothing major.
 *
 * Revision 1.16  1998/05/06 23:27:26  schreine
 * Added lathe option, increased ViewContainer default update delay to 1 sec.
 *
 * Revision 1.15  1998/05/05 19:41:44  speck
 * Added Spline and SplineSurface capability
 *
 * Revision 1.14  1998/05/04 09:12:30  schreine
 * Commenting, minor changes.
 *
 * Revision 1.13  1998/05/01 01:52:22  schreine
 * Added new buttons, started working with keyboard shortcuts.
 *
 * Revision 1.12  1998/04/30 19:41:44  schreine
 * Adding many comments.
 *
 * Revision 1.11  1998/04/27 19:36:52  schreine
 * New features.
 *
 * Revision 1.9  1998/04/23 17:33:43  schreine
 * Numeric options dialog, made background of all dialogs correct
 *
 * Revision 1.8  1998/04/16 19:19:50  schreine
 * New LockButtons for Pan and Zoom
 *
 * Revision 1.7  1998/04/14 02:02:31  schreine
 * Added new features
 *
 * Revision 1.6  1998/04/06 18:29:44  schreine
 * Added commenting, finishing up code necessary for the basic GUI.
 *
 **********************************************************/





